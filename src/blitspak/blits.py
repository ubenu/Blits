"""
Blits:
Created on 23 May 2017
Original Blivion:
Created on Tue Oct 25 13:11:32 2016

@author: Maria Schilstra
"""

#from PyQt5.uic import loadUiType

from PyQt5 import QtCore as qt
from PyQt5 import QtWidgets as widgets
from PyQt5 import QtGui as gui

import pandas as pd, numpy as np, copy as cp
import math


from blitspak.blits_mpl import MplCanvas, NavigationToolbar
from blitspak.blits_data import BlitsData
from blitspak.function_dialog import FunctionSelectionDialog
from blitspak.data_creation_dialog import DataCreationDialog
#from blitspak.series_linkage_dialog import SeriesLinkageDialog
from blitspak.crux_table_model import CruxTableModel
from functions.framework import FunctionsFramework

#import blitspak.blits_ui as ui
from PyQt5.uic import loadUiType
Ui_MainWindow, QMainWindow = loadUiType('..\\..\\Resources\\UI\\blits.ui')

# Original:
# To avoid using .ui file (from QtDesigner) and loadUIType, 
# created a python-version of the .ui file using pyuic5 from command line
# Here: pyuic5 blits.ui -o blits_ui.py
# Also: cannot (easily) use .qrc file, so need to create _rc.py file
# with icon definitions: pyrcc5 -o blits_rc.py blits.qrc
# Then import .py package, as below.
# (QMainWindow is a QtWidget; UI_MainWindow is generated by the converted .ui)



class Main(QMainWindow, Ui_MainWindow):
    
    N_STATES = 6
    START, DATA_ONLY, FUNCTION_ONLY, READY_FOR_FITTING, FITTED, REJECT = range(N_STATES)
    
    N_PS_SPECTYPES = 6
    PS_VALUES, PS_LEDITS, PS_VALUE_FIXED, PS_FIX_CBOXES, PS_GROUPS, PS_COMBOS = range(N_PS_SPECTYPES)
    N_P_SPECTYPES = 4
    P_ALL_FIXED, P_FIX_CBOXES, P_ALL_LINKED, P_LINK_CBOXES = range(N_P_SPECTYPES)
    N_S_SPECTYPES = 2
    S_INCLUDED, S_INCLUDE_CBOXES = range(N_S_SPECTYPES)
    
    ps_types = ['param_values', 'param_line_edits', 'param_values_fixed', 'param_fix_cboxes', 'series_groups', 'series_combos']
    s_types = ['included', 'included_cboxes']
    p_types = ['all_fixed', 'all_fixed_cboxes', 'all_linked', 'all_linked_cboxes']

    def __init__(self, ):
        super(Main, self).__init__()
        self.setupUi(self)

        self.scrutinize_dialog = None
        self.function_dialog = None
        self.create_data_set_dialog = None
                
        self.canvas = MplCanvas(self.mpl_window)
        self.plot_toolbar = NavigationToolbar(self.canvas, self.mpl_window)
        self.mpl_layout.addWidget(self.canvas)
        self.grp_show_axis = widgets.QGroupBox()
        self.axis_layout = widgets.QHBoxLayout()
        self.grp_show_axis.setLayout(self.axis_layout)
        self.grp_show_axis.setSizePolicy(widgets.QSizePolicy.Maximum, widgets.QSizePolicy.Maximum)
        self.axisgrp_layout = widgets.QHBoxLayout()
        self.axisgrp_layout.addWidget(self.grp_show_axis)
        self.mpl_layout.addLayout(self.axisgrp_layout)
        self.mpl_layout.addWidget(self.plot_toolbar)

        ft = gui.QFont('Calibri', 14)
        self.btn_est = widgets.QPushButton("Estimate")
        self.btn_est.setFont(ft)
        self.btn_apply = widgets.QPushButton("Apply")
        self.btn_apply.setFont(ft)
        self.btn_fit = widgets.QPushButton("Fit selected series")
        self.btn_fit.setFont(ft)
        self.bbox_fit.addButton(self.btn_fit, widgets.QDialogButtonBox.ActionRole)
        self.bbox_fit.addButton(self.btn_apply, widgets.QDialogButtonBox.ActionRole)
        self.bbox_fit.addButton(self.btn_est, widgets.QDialogButtonBox.ActionRole)

        
        self.action_open.triggered.connect(self.on_open)
        self.action_create.triggered.connect(self.on_create)
        self.action_close.triggered.connect(self.on_close_data)
        self.action_save.triggered.connect(self.on_save)
        self.action_select_function.triggered.connect(self.on_select_function)
        self.action_analyze.triggered.connect(self.on_analyze)
        self.action_quit.triggered.connect(self.close) 
        self.action_apply.triggered.connect(self.on_apply_current) 
        self.action_estimate.triggered.connect(self.on_estimate) 

        self.btn_est.clicked.connect(self.on_estimate)
        self.btn_apply.clicked.connect(self.on_apply_current)
        self.btn_fit.clicked.connect(self.on_analyze)
        
        self.blits_data = BlitsData()
        self.blits_fitted = BlitsData()
        self.blits_residuals = BlitsData()
        
        self.pn_fit_spec = None
        self.df_params_spec = None
        self.df_series_spec = None

        self.file_name = ""
        self.file_path = ""
        self.current_xaxis = None
        self.axis_selector_buttons = None
        self.current_function = None
        self.axes_limits = None
        
        self.current_state = self.START        
        self.update_controls()
        
    def init_fit_spec(self):        
        self.pn_fit_spec = None
        self.df_series_spec = None 
        self.df_params_spec = None
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            series_names = self.blits_data.get_series_names()
            param_names = self.current_function.get_parameter_names()

            self.pn_fit_spec = pd.Panel(major_axis=param_names, minor_axis=series_names, items=self.ps_types)
            self.pn_fit_spec.loc[self.ps_types[self.PS_VALUES]] = 0.0
            self.pn_fit_spec.loc[self.ps_types[self.PS_VALUE_FIXED]] = qt.Qt.Unchecked
            
            self.df_series_spec = pd.DataFrame(index=series_names, columns=self.s_types)
            self.df_series_spec.loc[:, self.s_types[self.S_INCLUDED]] = qt.Qt.Checked
            self.df_params_spec = pd.DataFrame(index=param_names, columns=self.p_types)
            self.df_params_spec.loc[:, self.p_types[self.P_ALL_FIXED]] = qt.Qt.Unchecked
            self.df_params_spec.loc[:, self.p_types[self.P_ALL_LINKED]] = qt.Qt.Unchecked
            
            for sname in series_names:
                cbx = widgets.QCheckBox()
                cbx.setText("")
                cbx.setToolTip("Uncheck to exclude from analysis")
                cbx.setCheckState(int(self.df_series_spec.loc[sname, self.s_types[self.S_INCLUDED]])) # int() is necessary for the checkbox to recognise the type as valid (int64 isn't)
                self.df_series_spec.loc[sname, self.s_types[self.S_INCLUDE_CBOXES]] = cbx 
                cbx.stateChanged.connect(self.on_select_series_changed)
                           
            for pname in param_names:
                cb_lnk = widgets.QCheckBox()
                cb_lnk.setCheckState(qt.Qt.Unchecked)
                cb_lnk.setText("")
                cb_lnk.setToolTip("Check to link " + pname + " across all series")
                cb_lnk.stateChanged.connect(self.on_all_linked_changed)
                
                cb_fix = widgets.QCheckBox()
                cb_fix.setCheckState(qt.Qt.Unchecked)
                cb_fix.setText("")
                cb_fix.setToolTip("Check to keep " + pname + " constant for all series")
                cb_fix.stateChanged.connect(self.on_all_fixed_changed)
                
                self.df_params_spec.loc[pname, 'all_linked'] = cb_lnk.checkState()
                self.df_params_spec.loc[pname, 'all_linked_cboxes'] = cb_lnk
                self.df_params_spec.loc[pname, 'all_fixed'] = cb_fix.checkState()
                self.df_params_spec.loc[pname, 'all_fixed_cboxes'] = cb_fix
                
            for pname in param_names:      
                for sname in series_names:
                    edt = widgets.QLineEdit()
                    edt.setValidator(gui.QDoubleValidator())
                    edt.setText("{:.3g}".format(self.pn_fit_spec.loc[self.ps_types[self.PS_VALUES], pname, sname]))
                    edt.textChanged.connect(self.on_param_val_changed)
                    cbx = widgets.QCheckBox()
                    cbx.setToolTip("Check to keep " + pname + " constant for series " + sname)
                    cbx.setCheckState(qt.Qt.Unchecked)
                    cbx.stateChanged.connect(self.on_param_fix_changed)
                    
                    combo = widgets.QComboBox()
                    combo.addItems(series_names)
                    combo.setEditable(False)
                    combo.setCurrentText(sname)
                    combo.currentIndexChanged.connect(self.on_linkage_changed)

                    sp_vals = [edt.text(), edt, cbx.checkState(), cbx, combo.currentText(), combo]
                    for sp, val in zip(self.ps_types, sp_vals):
                        self.pn_fit_spec.loc[sp, pname, sname] = val
                    

    def init_ui(self):
        if self.current_state not in (self.START, self.DATA_ONLY,): # there is a current function
            self.lbl_fn_name.setText("Selected function: " + self.current_function.name)
            self.txt_description.setText(self.current_function.long_description)
        else:
            self.lbl_fn_name.setText("Selected function: None")
            self.txt_description.setText("")
        if self.current_state not in (self.READY_FOR_FITTING, self.FITTED, ):
            self.tbl_series_links.clear()
            self.tbl_param_values.clear()
        else:
            if self.pn_fit_spec is not None:
                params = self.pn_fit_spec.major_axis.values
                series = self.pn_fit_spec.minor_axis.values
                
                ptbl_vheader = ["Fix all"]
                ptbl_vheader.extend(series)
                ptbl_hheader = ["Include"]
                ptbl_hheader.extend(params)
                ltbl_vheader = ["Link all"]
                ltbl_vheader.extend(series)
                ltbl_hheader = []
                ltbl_hheader.extend(params)
                
                self.tbl_param_values.setRowCount(len(ptbl_vheader))
                self.tbl_param_values.setColumnCount(len(ptbl_hheader))
                self.tbl_series_links.setRowCount(len(ltbl_vheader))
                self.tbl_series_links.setColumnCount(len(ltbl_hheader))            

                self.tbl_param_values.setHorizontalHeaderLabels(ptbl_hheader)
                self.tbl_param_values.setVerticalHeaderLabels(ptbl_vheader)  
                self.tbl_series_links.setHorizontalHeaderLabels(ltbl_hheader)
                self.tbl_series_links.setVerticalHeaderLabels(ltbl_vheader) 
                                
                # create the parameter values table
                vrange = range(len(ptbl_vheader)-len(series), len(ptbl_vheader))
                hrange = range((len(ptbl_hheader)-len(params)), len(ptbl_hheader))
                for sname, row in zip(series, vrange):
                    w = self.centred_tablewidget(self.df_series_spec.loc[sname, 'included_cboxes'])
                    self.tbl_param_values.setCellWidget(row, 0, w)
                for pname, col in zip(params, hrange):
                    w = self.centred_tablewidget(self.df_params_spec.loc[pname, 'all_fixed_cboxes'])
                    self.tbl_param_values.setCellWidget(0, col, w)
                for sname, row in zip(series, vrange):
                    for pname, col in zip(params, hrange):
                        edt = self.pn_fit_spec.loc[self.ps_types[self.PS_LEDITS], pname, sname]
                        cbx = self.pn_fit_spec.loc[self.ps_types[self.PS_FIX_CBOXES], pname, sname]
                        w = self.checkable_edit_widget(cbx, edt)
                        self.tbl_param_values.setCellWidget(row, col, w)
                        
                # create the linkage table
                vrange = range(len(ltbl_vheader)-len(series), len(ltbl_vheader))
                hrange = range((len(ltbl_hheader)-len(params)), len(ltbl_hheader))
                for pname, col in zip(params, hrange):
                    w = self.centred_tablewidget(self.df_params_spec.loc[pname, 'all_linked_cboxes'])
                    self.tbl_series_links.setCellWidget(0, col, w)
                for sname, row in zip(series, vrange):
                    for pname, col in zip(params, hrange):
                        self.tbl_series_links.setCellWidget(row, col, self.pn_fit_spec.loc['series_combos', pname, sname])
                
                self.tbl_param_values.resizeRowsToContents()
                self.tbl_series_links.resizeRowsToContents()

    def on_all_fixed_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            param, col = self.find_sender_index(self.df_params_spec)
            if param is not None:
                checkstate = self.df_params_spec.loc[param, col].checkState()
                self.df_params_spec.loc[param, self.p_types[self.P_ALL_FIXED]] = checkstate # synchronise with logical representation
                self.pn_fit_spec.loc[self.ps_types[self.PS_VALUE_FIXED], param] = checkstate
                self.update_param_vals_table()

    def on_all_linked_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            param, col = self.find_sender_index(self.df_params_spec)
            if param is not None:
                checkstate = self.df_params_spec.loc[param, col].checkState()
                self.df_params_spec.loc[param, self.p_types[self.P_ALL_LINKED]] = checkstate # synchronise with logical representation
                linkto = self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], param].iloc[0]
                for series in self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], param].index:
                    if checkstate == qt.Qt.Unchecked: 
                        linkto = series
                    self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], param, series] = linkto
                self.update_linkage_table()
            
    def on_analyze(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED):
            fitted_params, sigmas, confidence_intervals, tol = self.perform_fit()
            print(pd.DataFrame(fitted_params))
            print(pd.DataFrame(sigmas))
            print(pd.DataFrame(confidence_intervals))
            print("Tolerance: " + str(tol))
            
            self.set_fitted_curves(fitted_params, 100)
            self.set_residuals(fitted_params)
            self.draw_current_data_set()
            self.write_param_values_to_table(fitted_params)
            self.current_state = self.FITTED
            self.update_controls()
        pass
            
    def on_apply_current(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED):
            params = self.get_param_values_from_table(self.get_selected_series_names())
            self.set_fitted_curves(params, 100)
            self.draw_current_data_set()
        pass  
    
    def on_close_data(self):
        if self.current_state in (self.DATA_ONLY, self.READY_FOR_FITTING, self.FITTED, ):
            self.current_xaxis = None
            self.set_axis_selector()
            self.canvas.clear_plots()
            
            self.blits_data = BlitsData()
            self.blits_fitted = BlitsData()
            self.blits_residuals = BlitsData()
            
            if self.current_state == self.DATA_ONLY:
                self.current_state = self.START
            else:
                self.current_state = self.FUNCTION_ONLY
                
            self.init_fit_spec()
            self.init_ui()
            self.update_controls()
        pass
            
    def on_create(self):  
        if self.current_state in (self.FUNCTION_ONLY, ):
            self.create_data_set_dialog = DataCreationDialog(None, self.current_function)
            if self.create_data_set_dialog.exec() == widgets.QDialog.Accepted:
                template = self.create_data_set_dialog.template
                self.set_parameters_table(template[1])
                self.blits_data.create_working_data_from_template(template)
                self.current_state = self.READY_FOR_FITTING
                self.current_xaxis = self.blits_data.get_axes_names()[0]
                self.set_axis_selector()
                self.init_fit_spec()
                self.init_ui()
                self.update_controls()
                
    def on_estimate(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED):
            fn_p0 = self.current_function.p0
            n_par = len(self.current_function.parameters)
            data = self.get_data_for_fitting(self.get_selected_series_names())
            ffw = FunctionsFramework()
            params = ffw.get_initial_param_estimates(data, fn_p0, n_par)
            self.write_param_values_to_table(params)
            self.draw_current_data_set()
        pass 
    
    def on_linkage_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            df = self.pn_fit_spec.loc[self.ps_types[self.PS_COMBOS]]
            param, series = self.find_sender_index(df)
            if param is not None and series is not None:
                link = df.loc[param, series].currentText()
                self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], param, series] = link
                self.rationalise_groups(param)
                self.update_linkage_table()
            
    def on_open(self):
        if self.current_state in (self.START, self.FUNCTION_ONLY, ):
            file_path = widgets.QFileDialog.getOpenFileName(self, 
            "Open Data File", "", "CSV data files (*.csv);;All files (*.*)")[0]
            if file_path:
                self.blits_data.import_data(file_path)
                axes = self.blits_data.get_axes_names() #cp.deepcopy(self.blits_data.get_axes_names())
                self.current_xaxis = axes[0] #self.blits_data.get_axes_names()[0]
                if self.current_state == self.START:
                    self.current_state = self.DATA_ONLY
                else:
                    if len(self.current_function.independents) <= len(axes):
                        self.current_state = self.READY_FOR_FITTING
                    else:
                        self.current_function = None
                        self.current_state = self.DATA_ONLY
                        
                self.set_axis_selector()
                self.init_fit_spec()
                self.init_ui()
                self.update_controls()
                    
    def on_param_fix_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            param, series = None, None
            df = self.pn_fit_spec.loc[self.ps_types[self.PS_FIX_CBOXES]]
            param, series = self.find_sender_index(df)
            if param is not None and series is not None:
                param, series = self.find_sender_index(df)
                self.pn_fit_spec.loc[self.ps_types[self.PS_VALUE_FIXED], param, series] = self.sender().checkState()
                    
    def on_param_val_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            param, series = None, None
            df = self.pn_fit_spec.loc[self.ps_types[self.PS_LEDITS]]
            param, series = self.find_sender_index(df)
            if param is not None and series is not None:
                param, series = self.find_sender_index(df)
                self.pn_fit_spec.loc[self.ps_types[self.PS_VALUES], param, series] = self.sender().text()
        
    def on_select_series_changed(self):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            series, col = None, None
            series, col = self.find_sender_index(self.df_series_spec)
            if series is not None:
                checkstate = self.df_series_spec.loc[series, col].checkState()
                self.df_params_spec.loc[series, self.s_types[self.S_INCLUDED]] = checkstate # synchronise with logical representation
    
    def on_save(self):
        file_path = ""
        if self.current_state in (self.DATA_ONLY, self.READY_FOR_FITTING, ):
            file_path = widgets.QFileDialog.getSaveFileName(self, 
            "Save data", "", "CSV data files (*.csv);;All files (*.*)")[0]
        if self.current_state in (self.FITTED, ):
            file_path = widgets.QFileDialog.getSaveFileName(self, 
            "Save results", "", "CSV data files (*.csv);;All files (*.*)")[0]
        if file_path:
#             self.blits_data.export_results(file_path)
            pass
            
    def on_select_function(self):
        if self.current_state in range(self.N_STATES):  # should work from all states
            name, n_axes = "", np.inf
            if not self.current_state in (self.START, self.DATA_ONLY):  # a current function exists
                name = self.current_function.name
            if self.current_state in (self.DATA_ONLY, self.READY_FOR_FITTING, self.FITTED):
                n_axes = len(self.blits_data.get_axes_names())
            self.function_dialog = FunctionSelectionDialog(self, n_axes=n_axes, selected_fn_name=name)
            if self.function_dialog.exec() == widgets.QDialog.Accepted:
                self.current_function = self.function_dialog.get_selected_function()
                self.blits_fitted = BlitsData()
                self.blits_residuals = BlitsData()
                if self.current_state in (self.START, self.FUNCTION_ONLY):
                    self.current_state = self.FUNCTION_ONLY
                else:
                    self.current_state = self.READY_FOR_FITTING
                self.draw_current_data_set() # is this necessary?
                self.init_fit_spec()
                self.init_ui()
                self.update_controls()
    
    def on_xaxis_state_changed(self, checked):
        btn = self.sender()
        xaxis = btn.text()
        if btn.isChecked():
            self.current_xaxis = xaxis
            self.draw_current_data_set()   
            
    def draw_current_data_set(self):
        self.canvas.clear_plots() 
        if self.blits_data.has_data():
            self.canvas.set_colours(self.blits_data.series_names.tolist())
            for key in self.blits_data.series_names:
                series = self.blits_data.series_dict[key]
                x = series[self.current_xaxis] 
                y = series[key] 
                self.canvas.draw_series(key, x, y, 'primary')
        if self.blits_fitted.has_data():
            for key in self.blits_fitted.series_names:
                series = self.blits_fitted.series_dict[key]
                x = series[self.current_xaxis] 
                y = series[key] 
                self.canvas.draw_series(key, x, y, 'calculated')
        if self.blits_residuals.has_data():
            for key in self.blits_residuals.series_names:
                series = self.blits_residuals.series_dict[key]
                x = series[self.current_xaxis] 
                y = series[key] 
                self.canvas.draw_series(key, x, y, 'residuals')
            
    def get_constant_params_from_table(self, series_names):
        """
        Returns an (n_curves, n_params)-shaped array of Boolean values 
        (with rows and columns parallel to self.series_names and self.current_function.parameters, 
        respectively) with values for each parameter for each series); if True, 
        parameter values is constant, if False, parameter value is variable.
        """
        return cp.deepcopy(self.parameters_model.df_checks)[series_names].as_matrix().transpose()
        
    def get_data_for_fitting(self, series_names):
        data = []
        mins, maxs = self.blits_data.series_extremes()
        x_outer_limits = (mins.loc[:, self.current_xaxis].min(), 
                          maxs.loc[:, self.current_xaxis].max())
        start, stop = x_outer_limits
        for s in series_names:
            series = self.blits_data.series_dict[s] # the full data set
            indmin, indmax = np.searchsorted(series[self.current_xaxis],(start, stop))
            selection = cp.deepcopy(series[indmin:indmax]).as_matrix().transpose()
            if len(data) == 0:
                data = [selection]
            else:
                data.append(selection)
        return data
        
    def get_param_values_from_table(self, series_names):
        """
        Returns an (n_curves, n_params)-shaped array (with rows and columns 
        parallel to self.series_names and self.current_function.parameters, 
        respectively) with values for each parameter for each series).  
        """
        return cp.deepcopy(self.parameters_model.df_data)[series_names].as_matrix().transpose()

    def get_selected_series_names(self):
        cols = cp.deepcopy(self.parameters_model.df_data.columns)
        return cols.tolist()

    def get_linked_params_from_table(self, series_names):
        """
        STILL TO BE IMPLEMENTED
        
        Returns an (n_curves, n_params)-shaped array (with rows and columns parallel to 
        self.series_names and self.current_function.parameters, respectively)
        of integers, in which linked parameters are grouped by their values.
        Example for 4 curves and 3 parameters:
              p0    p1    p2
        c0    0     2     3
        c1    0     2     4
        c2    1     2     5
        c3    1     2     6
        indicates that parameter p0 is assumed to have the same value in 
        curves c0 and c1, and in curves c2 and c3 (a different value), 
        and that the value for p1 is the same in all curves, whereas
        the value of p2 is different for all curves. 
        """
        shape = self.parameters_model.df_data.shape
        
        links_array = np.arange(shape[0] * shape[1]).reshape((shape[0], shape[1])).transpose()
        return links_array
         
    def is_number(self, s):
        try:
            float(s)
            return True
        except ValueError:
            return False  
        
    def line_icon(self, color):
        pixmap = gui.QPixmap(50,10)
        pixmap.fill(gui.QColor(color))
        icon = gui.QIcon(pixmap)
        return icon  
    
    def perform_fit(self):
        func = self.current_function.func
        series_names = self.get_selected_series_names()
        data = self.get_data_for_fitting(series_names)
        param_values = self.get_param_values_from_table(series_names)
        const_params = self.get_constant_params_from_table(series_names)             
        links = self.get_linked_params_from_table(series_names)
        fitted_params = cp.deepcopy(param_values)
        sigmas = np.empty_like(fitted_params)
        confidence_intervals = np.empty_like(fitted_params)
        tol = None
        results = None  
        ffw = FunctionsFramework()
        self.globalfit = False
        if self.globalfit == True: #self.chk_global.checkState() == qt.Qt.Checked:
            links = self.series_linkage_dialog.get_unique_params_matrix().as_matrix()
            results = ffw.perform_global_curve_fit(data, func, param_values, const_params, links)
            fitted_params = results[0]
            sigmas = results[1]
            confidence_intervals = results[2]
            tol = results[3]
        else:
            tol = []
            n = 0
            for d, p, c, l in zip(data, param_values, const_params, links):
                d = [d, ]
                p = np.reshape(p, (1, p.shape[0]))
                c = np.reshape(c, (1, c.shape[0]))
                l = np.reshape(l, (1, l.shape[0]))
                results = ffw.perform_global_curve_fit(d, func, p, c, l)
                fitted_params[n] = results[0]
                sigmas[n] = results[1]
                confidence_intervals[n] = results[2]
                tol.append(results[3])
                n += 1
        return fitted_params, sigmas, confidence_intervals, tol      

    def set_axis_selector(self):
        self.axis_selector_buttons = {}
        self.clearLayout(self.axis_layout)
        if self.blits_data.has_data():
            self.axis_layout.addStretch()
            for name in self.blits_data.get_axes_names():
                btn = widgets.QRadioButton()
                btn.setText(name)
                btn.toggled.connect(self.on_xaxis_state_changed)
                self.axis_layout.addWidget(btn)
                self.axis_selector_buttons[btn.text()] = btn
            self.axis_layout.addStretch()  
            if not self.current_xaxis is None:
                if self.current_xaxis in self.axis_selector_buttons:
                    self.axis_selector_buttons[self.current_xaxis].setChecked(True)
                
    def set_fitted_curves(self, params, n_points):
        mins, maxs = self.blits_data.series_extremes()
        series_names = mins.index
        axes_names = mins.columns
        min_xs, max_xs = mins.iloc[:, :-1].as_matrix(), maxs.iloc[:, :-1].as_matrix()
        series_dict = {}
        for series_name, xmin, xmax, series_params in zip(series_names, min_xs, max_xs, params):
            df_data = pd.DataFrame(index=[], columns=range(n_points))
            # create values for the independent axes (shape (n_independents, n_points))
            for v_start, v_end in zip(xmin, xmax):
                x = pd.DataFrame(np.linspace(v_start, v_end, n_points)).transpose()
                df_data = pd.concat((df_data, x))
            x = df_data.as_matrix()
            # create the y values and put them in a DataFrame, transpose for easy concatenation
            y = pd.DataFrame(self.current_function.func(x, series_params)).transpose()
            df_data = pd.concat((df_data, y))
            l_axes_names = axes_names.tolist()[:-1]
            l_axes_names.append(series_name)
            df_data.index = l_axes_names
            series_dict[series_name] = df_data.transpose()
        self.blits_fitted = BlitsData()
        self.blits_fitted.series_names = np.array(series_names.tolist())
        self.blits_fitted.independent_names = np.array(l_axes_names)[:-1]
        self.blits_fitted.series_dict = series_dict
                
    def set_residuals(self, params):
        series_names = self.get_selected_series_names()
        data = self.get_data_for_fitting(series_names)
        axes = self.blits_data.get_axes_names()
        series_dict = {}
        for series_name, series_params, i in zip(series_names, params, range(len(series_names))):
            x = data[i][:-1]
            y_obs = data[i][-1]
            y_fit = self.current_function.func(x, series_params)
            y_res = np.atleast_2d(y_obs - y_fit)
            # create the y values and put them in a DataFrame, transpose for easy concatenation
            df_x = pd.DataFrame(x, index=axes)
            df_y = pd.DataFrame(y_res, index=[series_name])
            df_data = pd.concat((df_x, df_y)).transpose()
            series_dict[series_name] = df_data
        self.blits_residuals = BlitsData()
        self.blits_residuals.series_names = np.array(series_names)
        self.blits_residuals.independent_names = cp.deepcopy(axes)
        self.blits_residuals.series_dict = series_dict
        
    def rationalise_groups(self, parameter):
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ) and parameter != '':
            prow = self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], parameter]
            x = prow.index
            df_wf = pd.DataFrame(np.zeros((len(x), len(x))), index=x, columns=x, dtype=bool) # set up the matrix
            for series, val in prow.iteritems():
                df_wf.loc[series, series] = True # make the matrix reflexive
                if series != val:
                    df_wf.loc[series, val] = True
                    df_wf.loc[val, series] = True # make the matrix symmetrical
            # make matrix transitive (Warshall-Floyd)
            for k in range(len(x)):
                for i in range(len(x)):
                    for j in range(len(x)):
                        df_wf.iloc[i, j] = df_wf.iloc[i, j] or (df_wf.iloc[i, k] == 1 and df_wf.iloc[k, j] == 1)
            # Find the equivalence classes for this parameter 
            seen = []
            sr_equiv_clss = pd.Series(index=x)          
            for series0, row in df_wf.iterrows():
                for series1, val in row.iteritems():
                    if val:
                        if series1 not in seen:
                            sr_equiv_clss.loc[series1] = series0
                            seen.append(series1)
            for series in x:
                self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS], parameter, series] = sr_equiv_clss.loc[series]
        pass
 
    def update_controls(self):
        """
        Enables and disables controls for each state
        """
        if self.current_state == self.START:
            self.action_open.setEnabled(True)
            self.action_create.setEnabled(False)
            self.action_close.setEnabled(False)
            self.action_save.setEnabled(False)
            self.action_select_function.setEnabled(True)
            self.action_analyze.setEnabled(False)
            self.btn_apply.setEnabled(False)
            self.btn_fit.setEnabled(False)
            self.btn_est.setEnabled(False)
            self.action_quit.setEnabled(True)
        elif self.current_state == self.DATA_ONLY:
            self.action_open.setEnabled(False)
            self.action_create.setEnabled(False)
            self.action_close.setEnabled(True)
            self.action_save.setEnabled(True)
            self.action_select_function.setEnabled(True)
            self.action_analyze.setEnabled(False)
            self.btn_apply.setEnabled(False)
            self.btn_fit.setEnabled(False)
            self.btn_est.setEnabled(False)
            self.action_quit.setEnabled(True) 
        elif self.current_state == self.FUNCTION_ONLY:
            self.action_open.setEnabled(True)
            self.action_create.setEnabled(True)
            self.action_close.setEnabled(False)
            self.action_save.setEnabled(False)
            self.action_select_function.setEnabled(True)
            self.action_analyze.setEnabled(False)
            self.btn_apply.setEnabled(False)
            self.btn_fit.setEnabled(False)
            self.btn_est.setEnabled(False)
            self.action_quit.setEnabled(True) 
        elif self.current_state == self.READY_FOR_FITTING:
            self.action_open.setEnabled(False)
            self.action_create.setEnabled(False)
            self.action_close.setEnabled(True)
            self.action_save.setEnabled(True)
            self.action_select_function.setEnabled(True)
            self.action_analyze.setEnabled(True)
            self.btn_apply.setEnabled(True)
            self.btn_fit.setEnabled(True)
            self.btn_est.setEnabled(True)
            self.action_quit.setEnabled(True) 
        elif self.current_state == self.FITTED:
            self.action_open.setEnabled(False)
            self.action_create.setEnabled(False)
            self.action_close.setEnabled(True)
            self.action_save.setEnabled(True)
            self.action_select_function.setEnabled(True)
            self.action_analyze.setEnabled(True)
            self.btn_apply.setEnabled(True)
            self.btn_fit.setEnabled(True)
            self.btn_est.setEnabled(True)
            self.action_quit.setEnabled(True)     
        else:
            print('Illegal state')
                                          
    def update_linkage_table(self):
        """
        Sets combo-boxes in linkage_combos to the current values in linkage_groups        
        """
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            combos = self.pn_fit_spec.loc[self.ps_types[self.PS_COMBOS]]
            vals = self.pn_fit_spec.loc[self.ps_types[self.PS_GROUPS]]
            for i, row in vals.iterrows():
                for j, val in row.iteritems():
                    box = combos.loc[i, j]
                    if box.currentText() != val:
                        box.currentIndexChanged.disconnect()
                        box.setCurrentText(val)
                        box.currentIndexChanged.connect(self.on_linkage_changed)
                        
    def update_param_vals_table(self):
        """
        Sets text and checkstate of values table items to their corresponding 
        logical values in pn_fit_spec        
        """
        if self.current_state in (self.READY_FOR_FITTING, self.FITTED, ):
            edts = self.pn_fit_spec.loc[self.ps_types[self.PS_LEDITS]]
            cbxs = self.pn_fit_spec.loc[self.ps_types[self.PS_FIX_CBOXES]]
            vals = self.pn_fit_spec.loc[self.ps_types[self.PS_VALUES]]
            chks = self.pn_fit_spec.loc[self.ps_types[self.PS_VALUE_FIXED]]
            for i, row in vals.iterrows():
                for j, val in row.iteritems():
                    edt = edts.loc[i, j]
                    cbx = cbxs.loc[i, j]
                    checkstate = chks.loc[i, j]
                    if edt.text() != val:
                        edt.textChanged.disconnect()
                        edt.setText(val)
                        edt.textChanged.connect(self.on_param_val_changed)
                    if  cbx.checkState() != checkstate:
                        cbx.stateChanged.disconnect()
                        cbx.setCheckState(qt.Qt.Unchecked)
                        if checkstate == qt.Qt.Checked:
                            cbx.setCheckState(qt.Qt.Checked)
                        cbx.stateChanged.connect(self.on_param_fix_changed)
                        
    def write_param_values_to_table(self, param_values):
        self.parameters_model.change_content(param_values.transpose())
        #self.parameters_model.df_data[:] = param_values.transpose()
        #self.tbl_params.resizeColumnsToContents() # This redraws the table (necessary)

    ### Convenience functions and procedures
    
    def circle_icon(self, color):
        pix = gui.QPixmap(30,30)
        pix.fill(gui.QColor("transparent"))
        paint = gui.QPainter()
        paint.begin(pix)
        paint.setBrush(gui.QColor(color))
        paint.setPen(gui.QColor("transparent"))
        paint.drawEllipse(0,0,30,30)
        paint.end()
        icon = gui.QIcon(pix)
        return icon        

    def clearLayout(self, layout):
        while layout.count():
            child = layout.takeAt(0)
            if child.widget() is not None:
                child.widget().deleteLater()
            elif child.layout() is not None:
                self.clearLayout(child.layout())            
                                    
    def find_sender_index(self, dataframe):
        sender_i, sender_j = None, None
        for i, row, in dataframe.iterrows():
            for j, item in row.iteritems():
                if item is self.sender():
                    sender_i = i
                    sender_j = j
        return sender_i, sender_j
    
    def checkable_edit_widget(self, checkbox, textbox):
        wid = widgets.QWidget()
        hlo = widgets.QHBoxLayout()
        wid.setLayout(hlo)
        hlo.addWidget(textbox)
        hlo.addStretch()
        hlo.addWidget(checkbox)
        return wid
            
    def centred_tablewidget(self, qtwidget):
        wid = widgets.QWidget()
        hlo = widgets.QVBoxLayout()
        hlo.setAlignment(qt.Qt.AlignCenter)
        wid.setLayout(hlo)
        hlo.addWidget(qtwidget)
        return wid            


# Standard main loop code

if __name__ == '__main__':
    import sys
    app = widgets.QApplication(sys.argv)
    main = Main()
    main.show()
    sys.exit(app.exec_())

#     def create_results_tab(self, phase_id, model_string, results_table):
#         new_tab = widgets.QWidget()
#         lo = widgets.QVBoxLayout(new_tab)
#         x = widgets.QLabel(model_string)
#         lo.addWidget(x)
#         lo.addWidget(results_table)
#         new_tab.setLayout(lo)
#         self.tabWidget.addTab(new_tab, phase_id)

## SpanSelector stuff

# from matplotlib.widgets import SpanSelector

#         self.span = SpanSelector(self.canvas.data_plot, 
#                                  self.on_select_span, 
#                                  'horizontal', 
#                                  useblit=True, 
#                                  rectprops=dict(alpha=0.5, facecolor='red')
#                                  )        

#     def on_select_span(self, xmin, xmax):
#         self.span.set_active(False)
#         if xmin != xmax:
#             mins, maxs = self.blits_data.series_extremes()
#             # mins, maxs: index: series names, columns: independent names + y (dependent)  
#             x_outer_limits = (mins.loc[:, self.current_xaxis].min(), maxs.loc[:, self.current_xaxis].max())
#             x_limits = (xmin, xmax)                
#             if xmin > xmax:
#                 x_limits = (xmax, xmin)
#             self.canvas.set_vlines(x_limits, x_outer_limits)


#     def preserve_vlines(self):
#         if self.blits_data.has_data():
#             mins, maxs = self.blits_data.series_extremes()
#             x_outer_limits = (mins.loc[:, self.current_xaxis].min(), 
#                               maxs.loc[:, self.current_xaxis].max())
#             x_limits = cp.deepcopy(x_outer_limits)
#             self.axes_limits.loc[self.current_xaxis, 'subsection'] = False
#             if self.canvas.has_vertical_lines():
#                 x_limits = (self.canvas.vline0.get_x(), 
#                             self.canvas.vline1.get_x())
#                 self.axes_limits.loc[self.current_xaxis, 'subsection'] = True
#             self.axes_limits.loc[self.current_xaxis, 'inner'] = x_limits
#             self.axes_limits.loc[self.current_xaxis, 'outer'] = x_outer_limits
#         else:
#             self.axes_limits = None        
            



