Attribute,Value
@Name,Mean
@Short description,Mean of data in y
@Long description,Returns the mean of observed data (y)
@Function,ycalc = a
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,a
@First estimates,a = 1.0
,
@Name,Straight line
@Short description,a.x + b
@Long description,Returns the parameters for the best fit of the observed  data (y) with a straight line 
@Function,ycalc = a * x + b
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,"a, b"
@First estimates,"a = 1.0, b = 1.0"
,
@Name,Single exponential decay
@Short description,y0 + A.exp(-x.k) 
@Long description,Returns the parameters for the best fit of the observed  data (y) with a single exponential decay 
@Function,ycalc = y0 + A * exp(-x * k)
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,"y0, A, k"
@First estimates,"y0 = last(y), A = first(y) - last(y), k = 0.1 * last(x)"
,
@Name,Single exponential decay and straight line
@Short description,y0 + A.exp(-x.k) + slope.x
@Long description,Returns the parameters for the best fit of the observed  data (y) with a single exponential decay on top of a straight line
@Function,ycalc = y0 + A * exp(-x * k) + slope * x
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,"y0, A, k, slope"
@First estimates,"y0 = last(y), A = first(y) - last(y), k = 0.1 * last(x), slope = 0.0"
@End,
,
@Name,Double exponential decay
@Short description,y0 + A1.exp(-x.k1) + A2.exp(-x.k2)
@Long description,Returns the parameters for the best fit of the observed  data (y) with a double exponential decay 
@Function,ycalc = y0 + A1 * exp(-x * k1) + A2 * exp(-x * k2)
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,"y0, A1, k1, A2, k2"
@First estimates,"y0 = last(y), A1 = first(y) - last(y), k1 = 10.0 / last(x), A2 = first(y) - last(y), k2 = 1.0 / last(x)"
,
@Name,Triple exponential decay
@Short description,y0 + A1.exp(-x.k1) + A2.exp(-x.k2) + A3.exp(-x.k3)
@Long description,Returns the parameters for the best fit of the observed  data (y) with a triple exponential decay 
@Function,ycalc = y0 + A1 * exp(-x * k1) + A2 * exp(-x * k2)  + A3 * exp(-x * k3)
@Observed dependent,yobs
@Calculated dependent,ycalc
@Independents,x
@Parameters,"y0, A1, k1, A2, k2, A3, k3"
@First estimates,"y0 = last(y), A1 = first(y) - last(y), k1 = 10.0 / last(x), A2 = first(y) - last(y), k2 = 1.0 / last(x), A3 =  first(y) - last(y), k3 = 0.1 / last(x)"
,
@Name,Competitive 2-ligand binding (Absorbance/Fluorescence)
@Short description,"P + L <=> PL, P + N <=> PN"
@Long description,Returns the parameters that describe the competitive binding of two ligands to a protein (protein and ligand comcentration measured by absorbance or fluorescence)
@Function,"p = @FindRoot(KdL, KdN, Pt, Lt, Nt), pl = Lt * p / (KdL * p), pn = Nt * p / (KdN * p), [L] = Lt - pn, n = Nt - pn, Calc_signal = eP*p + eL*[L] + eN*n + ePL*pl + ePN*pn"
@FindRoot,"p*p*p + (KdL+KdL+Lt+Nt-Pt)*p*p + (KdL*KdN+Lt*KdN+Nt*KdL-(KdL+KdN)*Pt)*p - KdL*KdN*Pt = 0, solve p within [0, Pt]"
@Observed dependent,Signal
@Calculated dependent,Calc_signal
@Independents,"Pt, Lt, Nt"
@Parameters,"KdL, KdN, eP, eL, eN, ePL, ePN"
@First estimates,"KdL = (max(Lt) + min(Lt))/2, KdN = (max(Nt) + min(Nt))/2, eP = 0.0, eL = max(signal) * Lt, eN = 0.0, ePL = max(signal) * Pt, ePN = 0.0"
